version: "3.8"
services:
  x-airflow-common:
    &airflow-common
    image: custom-airflow
    environment:
      &airflow-common-env
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__PLUGINS_FOLDER: /opt/airflow/plugins
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      # AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/conf/:/opt/hadoop/etc/hadoop
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/spark:/opt/airflow/spark
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on:
      &airflow-common-depends-on
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:13
    container_name: postgres_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
    restart: always
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8083:8080"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    image: custom-airflow
    container_name: scheduler
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    image: custom-airflow
    container_name: triggerer
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    image: custom-airflow
    container_name: airflow-init
    entrypoint: /bin/bash

    command:
      - -c
      - |
        function ver() { printf "%04d%04d%04d%04d" $${1//./ }; }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        min_airflow_version=2.8.4
        if (( $$(ver $$airflow_version) < $$(ver $$min_airflow_version) )); then
          echo "Airflow $$airflow_version < $$min_airflow_version"; exit 1; fi
        echo "DAGS: $$AIRFLOW__CORE__DAGS_FOLDER"
        echo "PLUGINS: $$AIRFLOW__CORE__PLUGINS_FOLDER"
        echo "LOGS: $$AIRFLOW__LOGGING__BASE_LOG_FOLDER"
        mkdir -p "$$AIRFLOW__CORE__DAGS_FOLDER" "$$AIRFLOW__CORE__PLUGINS_FOLDER" "$$AIRFLOW__LOGGING__BASE_LOG_FOLDER"
        chown -R "${AIRFLOW_UID:-50000}:0" "$$AIRFLOW__CORE__DAGS_FOLDER" "$$AIRFLOW__CORE__PLUGINS_FOLDER" "$$AIRFLOW__LOGGING__BASE_LOG_FOLDER"
        exec /entrypoint airflow version

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
#    volumes:
#      - .:/sources
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"

    command:
      - bash
      - -c
      - airflow
  postgres-tgt:
    image: postgres:15-alpine
    container_name: postgres-tgt
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  mysql:
    image: mysql:8.3
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870"
      - "8020:8020"
    environment:
      - CLUSTER_NAME=test
      - HDFS_CONF_dfs_namenode_name_dir=file:///hadoop/dfs/name
      - PYSPARK_PYTHON=/opt/conda/bin/python
      - ENSURE_NAMENODE_DIR=true
    entrypoint:
      - /bin/bash
      - -lc
      - |
        set -e
        if [ ! -x /opt/conda/bin/python ]; then
          echo "Installing Miniconda..."
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-py311_24.1.2-0-Linux-x86_64.sh -o /tmp/m.sh
          bash /tmp/m.sh -b -p /opt/conda
        fi
        exec /entrypoint.sh /run.sh
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    env_file:
      - ./hive-metastore/conf/hadoop.env
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    environment:
      - SERVICE_PRECONDITION=namenode:9870
      - PYSPARK_PYTHON=/opt/conda/bin/python
    entrypoint:
      - /bin/bash
      - -lc
      - |
        set -e
        if [ ! -x /opt/conda/bin/python ]; then
          echo "Installing Miniconda..."
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-py311_24.1.2-0-Linux-x86_64.sh -o /tmp/m.sh
          bash /tmp/m.sh -b -p /opt/conda
        fi
        exec /entrypoint.sh /run.sh
    ports:
      - "9864:9864"
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    env_file:
      - ./hive-metastore/conf/hadoop.env
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    environment:
      - SERVICE_PRECONDITION=namenode:8020 datanode:9864
      - PYSPARK_PYTHON=/opt/conda/bin/python
    entrypoint:
      - /bin/bash
      - -lc
      - |
        set -e
        if [ ! -x /opt/conda/bin/python ]; then
          echo "Installing Miniconda..."
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-py311_24.1.2-0-Linux-x86_64.sh -o /tmp/m.sh
          bash /tmp/m.sh -b -p /opt/conda
        fi
        exec /entrypoint.sh /run.sh
    ports:
      - "8088:8088"
    env_file:
      - ./hive-metastore/conf/hadoop.env
  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    environment:
      - SERVICE_PRECONDITION=namenode:8020 datanode:9864 resourcemanager:8088
      - PYSPARK_PYTHON=/opt/conda/bin/python
    entrypoint:
      - /bin/bash
      - -lc
      - |
        set -e
        if [ ! -x /opt/conda/bin/python ]; then
          echo "Installing Miniconda..."
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-py311_24.1.2-0-Linux-x86_64.sh -o /tmp/m.sh
          bash /tmp/m.sh -b -p /opt/conda
        fi
        exec /entrypoint.sh /run.sh
    ports:
      - "8042:8042"
    env_file:
      - ./hive-metastore/conf/hadoop.env

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      - SERVICE_PRECONDITION=namenode:8020 namenode:9870 datanode:9864 resourcemanager:8088
      - PYSPARK_PYTHON=/opt/conda/bin/python
    entrypoint:
      - /bin/bash
      - -lc
      - |
        set -e
        if [ ! -x /opt/conda/bin/python ]; then
          echo "Installing Miniconda..."
          curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-py311_24.1.2-0-Linux-x86_64.sh -o /tmp/m.sh
          bash /tmp/m.sh -b -p /opt/conda
        fi
        exec /entrypoint.sh /run.sh
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hive-metastore/conf/hadoop.env

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    env_file:
      - ./hive-metastore/conf/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_fs_defaultFS: hdfs://namenode:8020
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "namenode:8020 datanode:9864 hive-metastore:9083"
    ports:
      - "10000:10000"

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hive-metastore/conf/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:8020 datanode:9864 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"

  spark-master:
    build: ./spark-client
    container_name: spark-master
    environment:
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - HADOOP_HOME=/opt/hadoop
      - PYSPARK_PYTHON=/opt/conda/bin/python
      - PYSPARK_DRIVER_PYTHON=/opt/conda/bin/python
    ports:
      - "8080:8080"
      - "7077:7077"
      - "4040:4040"
      - "8888:8888"
    volumes:
      - ./spark-client/apps:/opt/spark-apps
      - ./drivers:/opt/drivers

volumes:
  postgres-data:
  mysql-data:
  hadoop_namenode:
  hadoop_historyserver:
  hadoop_datanode:
  postgres_data:
  postgres-db-volume: